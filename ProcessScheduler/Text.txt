//void Scheduler::Fill_Rdy()
//{
//	Queue<Process *> Arrived;
//	if (NEW.isEmpty())
//		return;
//
//	for (int i = 0; i < total_nprocess; i++)
//	{
//		Process *tmp;
//		if (NEW.dequeue(tmp))
//		{
//			if (tmp->getAT() == timestep)
//			{
//				Arrived.enqueue(tmp);
//			}
//			else
//			{
//				NEW.enqueue(tmp);
//			}
//		}
//	}
//
//	Node<Processor *> *processorNode = StartingPoint;
//	while (!Arrived.isEmpty())
//	{
//		Process *tmp;
//		Arrived.dequeue(tmp);
//		if (tmp) {
//			tmp->setCpuArrivalTime(timestep);
//			(processorNode->getItem())->moveToRDY(tmp);
//		}
//
//		if (processorNode->getNext())
//		{
//			processorNode = processorNode->getNext();
//		}
//		else // If there is no next node, set the node to the head of the list
//		{
//			processorNode = Processors.getHead();
//		}
//	}
//	StartingPoint = processorNode;
//}



//void Scheduler::Fill_Rdy()
//{
//	Queue<Process*> Arrived;
//	Process* tmp;
//	Process* tmpa;
//
//	if (NEW.isEmpty())
//		return;
//
//	int notArrivedCount = NEW.getCount();  // Store the initial count of processes in NEW queue
//
//	for (int i = 0; i < notArrivedCount; i++)
//	{
//		Process* tmpa;
//		if (NEW.dequeue(tmpa))
//		{
//			if (tmpa->getAT() == timestep)
//			{
//				Arrived.enqueue(tmpa);
//			}
//			else
//			{
//				NEW.enqueue(tmpa);
//			}
//		}
//	}
//
//
//	while (Arrived.dequeue(tmp))
//	{
//		if (!tmp) { break; }
//		Node<Processor*>* processorNode = Processors.getHead();
//		Processor* minProcessor = nullptr;
//		int minTime = INT_MAX;
//
//		while (processorNode)
//		{
//			Processor* tempProcessor = processorNode->getItem();
//			if (!tempProcessor)
//			{
//				processorNode = processorNode->getNext();
//				continue;
//			}
//
//			if ((processorNode->getItem()->getCurrentTime() < minTime))
//			{
//				minTime = processorNode->getItem()->getCurrentTime();
//				minProcessor = processorNode->getItem();
//			}
//
//			processorNode = processorNode->getNext();
//		}
//
//		if (minProcessor) {
//			tmp->setRT(timestep);
//			tmp->setCpuArrivalTime(timestep);
//			minProcessor->moveToRDY(tmp);
//		}
//		else {
//			Arrived.enqueue(tmp);
//		}
//	}
//}

void Scheduler::randomizeRUN(Processor* const& prcsr)
{ // should be run before the SCHEDULINGALGO function so
	// rdy wont be left empty a whole cycle in case the
	// function activates.
	int rnum = (rand() % 100) + 1;
	if (rnum >= 1 && rnum <= 15)
	{
		Process* ptr = prcsr->clearRUN();
		if (ptr)
		{
			BLK.enqueue(ptr);
		}
	}
	else if (rnum >= 20 && rnum <= 30)
	{
		Process* ptr = prcsr->clearRUN();
		if (ptr)
		{
			prcsr->moveToRDY(ptr);
		}
	}
	else if (rnum >= 50 && rnum <= 60)
	{
		Process* ptr = prcsr->clearRUN();
		if (ptr)
		{
			TRM.enqueue(ptr);
		}
	}
}

void Scheduler::randomKill(Processor* const& prcsr)
{
	FCFS* fcfs_ptr = dynamic_cast<FCFS*>(prcsr);
	if (!fcfs_ptr)
		return;

	int rnum = (rand() % total_nprocess) + 1;
	Process* tmp = fcfs_ptr->removeFromReady(rnum);

	if (tmp)
		TRM.enqueue(tmp);
}

void Scheduler::randomizeBLK(Processor* const& prcsr)
{
	int rnum = (rand() % 100) + 1;
	if (rnum > 10)
		return;

	Process* first_elm;
	bool dequed = BLK.dequeue(first_elm);
	if (dequed)
	{
		prcsr->moveToRDY(first_elm);
	}
}